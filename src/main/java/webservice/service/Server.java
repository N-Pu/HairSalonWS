
package webservice.service;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Server", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Server {


    /**
     * 
     * @param arg0
     */
    @WebMethod(operationName = "DeleteBooking")
    @RequestWrapper(localName = "DeleteBooking", targetNamespace = "http://server/", className = "webservice.service.DeleteBooking")
    @ResponseWrapper(localName = "DeleteBookingResponse", targetNamespace = "http://server/", className = "webservice.service.DeleteBookingResponse")
    @Action(input = "http://server/Server/DeleteBookingRequest", output = "http://server/Server/DeleteBookingResponse")
    public void deleteBooking(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     */
    @WebMethod(operationName = "IdMakerForStaff")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "IdMakerForStaff", targetNamespace = "http://server/", className = "webservice.service.IdMakerForStaff")
    @ResponseWrapper(localName = "IdMakerForStaffResponse", targetNamespace = "http://server/", className = "webservice.service.IdMakerForStaffResponse")
    @Action(input = "http://server/Server/IdMakerForStaffRequest", output = "http://server/Server/IdMakerForStaffResponse")
    public int idMakerForStaff(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "AddNewService")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "AddNewService", targetNamespace = "http://server/", className = "webservice.service.AddNewService")
    @ResponseWrapper(localName = "AddNewServiceResponse", targetNamespace = "http://server/", className = "webservice.service.AddNewServiceResponse")
    @Action(input = "http://server/Server/AddNewServiceRequest", output = "http://server/Server/AddNewServiceResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/AddNewService/Fault/Exception")
    })
    public int addNewService(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "GetServiceList")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GetServiceList", targetNamespace = "http://server/", className = "webservice.service.GetServiceList")
    @ResponseWrapper(localName = "GetServiceListResponse", targetNamespace = "http://server/", className = "webservice.service.GetServiceListResponse")
    @Action(input = "http://server/Server/GetServiceListRequest", output = "http://server/Server/GetServiceListResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/GetServiceList/Fault/Exception")
    })
    public String getServiceList()
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "GetAHairCut")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GetAHairCut", targetNamespace = "http://server/", className = "webservice.service.GetAHairCut")
    @ResponseWrapper(localName = "GetAHairCutResponse", targetNamespace = "http://server/", className = "webservice.service.GetAHairCutResponse")
    @Action(input = "http://server/Server/GetAHairCutRequest", output = "http://server/Server/GetAHairCutResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/GetAHairCut/Fault/Exception")
    })
    public String getAHairCut(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        int arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        int arg4)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "TimeChecker")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "TimeChecker", targetNamespace = "http://server/", className = "webservice.service.TimeChecker")
    @ResponseWrapper(localName = "TimeCheckerResponse", targetNamespace = "http://server/", className = "webservice.service.TimeCheckerResponse")
    @Action(input = "http://server/Server/TimeCheckerRequest", output = "http://server/Server/TimeCheckerResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/TimeChecker/Fault/Exception")
    })
    public boolean timeChecker(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "DeleteService")
    @RequestWrapper(localName = "DeleteService", targetNamespace = "http://server/", className = "webservice.service.DeleteService")
    @ResponseWrapper(localName = "DeleteServiceResponse", targetNamespace = "http://server/", className = "webservice.service.DeleteServiceResponse")
    @Action(input = "http://server/Server/DeleteServiceRequest", output = "http://server/Server/DeleteServiceResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/DeleteService/Fault/Exception")
    })
    public void deleteService(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     */
    @WebMethod(operationName = "IdMakerForClient")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "IdMakerForClient", targetNamespace = "http://server/", className = "webservice.service.IdMakerForClient")
    @ResponseWrapper(localName = "IdMakerForClientResponse", targetNamespace = "http://server/", className = "webservice.service.IdMakerForClientResponse")
    @Action(input = "http://server/Server/IdMakerForClientRequest", output = "http://server/Server/IdMakerForClientResponse")
    public int idMakerForClient(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod(operationName = "GetFreeTime")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GetFreeTime", targetNamespace = "http://server/", className = "webservice.service.GetFreeTime")
    @ResponseWrapper(localName = "GetFreeTimeResponse", targetNamespace = "http://server/", className = "webservice.service.GetFreeTimeResponse")
    @Action(input = "http://server/Server/GetFreeTimeRequest", output = "http://server/Server/GetFreeTimeResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Server/GetFreeTime/Fault/Exception")
    })
    public String getFreeTime(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2)
        throws Exception_Exception
    ;

}
